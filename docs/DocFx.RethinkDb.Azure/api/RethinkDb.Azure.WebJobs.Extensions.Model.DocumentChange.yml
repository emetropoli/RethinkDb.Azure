### YamlMime:ManagedReference
items:
- uid: RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange
  commentId: T:RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange
  id: DocumentChange
  parent: RethinkDb.Azure.WebJobs.Extensions.Model
  children:
  - RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.GetNewValue
  - RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.GetNewValue``1
  - RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.GetOldValue
  - RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.GetOldValue``1
  - RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.Type
  langs:
  - csharp
  - vb
  name: DocumentChange
  nameWithType: DocumentChange
  fullName: RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange
  type: Class
  source:
    remote:
      path: src/RethinkDb.Azure.WebJobs.Extensions/Model/DocumentChange.cs
      branch: master
      repo: https://github.com/tpeczek/RethinkDb.Azure.git
    id: DocumentChange
    path: ../../src/RethinkDb.Azure.WebJobs.Extensions/Model/DocumentChange.cs
    startLine: 10
  assemblies:
  - RethinkDb.Azure.WebJobs.Extensions
  namespace: RethinkDb.Azure.WebJobs.Extensions.Model
  summary: "\nRepresents a document change in RethinkDB table.\n"
  example: []
  syntax:
    content: public class DocumentChange
    content.vb: Public Class DocumentChange
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.Type
  commentId: P:RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.Type
  id: Type
  parent: RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: DocumentChange.Type
  fullName: RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.Type
  type: Property
  source:
    remote:
      path: src/RethinkDb.Azure.WebJobs.Extensions/Model/DocumentChange.cs
      branch: master
      repo: https://github.com/tpeczek/RethinkDb.Azure.git
    id: Type
    path: ../../src/RethinkDb.Azure.WebJobs.Extensions/Model/DocumentChange.cs
    startLine: 24
  assemblies:
  - RethinkDb.Azure.WebJobs.Extensions
  namespace: RethinkDb.Azure.WebJobs.Extensions.Model
  summary: "\nIf <xref href=\"Microsoft.Azure.WebJobs.RethinkDbTriggerAttribute.IncludeTypes\" data-throw-if-not-resolved=\"false\"></xref> is set to true, this property will indicate the type of change.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty("type")]

      [JsonConverter(typeof(StringEnumConverter))]

      public DocumentChangeType? Type { get; }
    parameters: []
    return:
      type: System.Nullable{RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChangeType}
    content.vb: >-
      <JsonProperty("type")>

      <JsonConverter(GetType(StringEnumConverter))>

      Public ReadOnly Property Type As DocumentChangeType?
  overload: RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.Type*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: type
  - type: Newtonsoft.Json.JsonConverterAttribute
    ctor: Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: Newtonsoft.Json.Converters.StringEnumConverter
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.GetOldValue
  commentId: M:RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.GetOldValue
  id: GetOldValue
  parent: RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange
  langs:
  - csharp
  - vb
  name: GetOldValue()
  nameWithType: DocumentChange.GetOldValue()
  fullName: RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.GetOldValue()
  type: Method
  source:
    remote:
      path: src/RethinkDb.Azure.WebJobs.Extensions/Model/DocumentChange.cs
      branch: master
      repo: https://github.com/tpeczek/RethinkDb.Azure.git
    id: GetOldValue
    path: ../../src/RethinkDb.Azure.WebJobs.Extensions/Model/DocumentChange.cs
    startLine: 34
  assemblies:
  - RethinkDb.Azure.WebJobs.Extensions
  namespace: RethinkDb.Azure.WebJobs.Extensions.Model
  summary: "\nGets the old value. When a document is inserted, old value will be null.\n"
  example: []
  syntax:
    content: public JObject GetOldValue()
    return:
      type: Newtonsoft.Json.Linq.JObject
      description: The old value.
    content.vb: Public Function GetOldValue As JObject
  overload: RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.GetOldValue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.GetOldValue``1
  commentId: M:RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.GetOldValue``1
  id: GetOldValue``1
  parent: RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange
  langs:
  - csharp
  - vb
  name: GetOldValue<T>()
  nameWithType: DocumentChange.GetOldValue<T>()
  fullName: RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.GetOldValue<T>()
  type: Method
  source:
    remote:
      path: src/RethinkDb.Azure.WebJobs.Extensions/Model/DocumentChange.cs
      branch: master
      repo: https://github.com/tpeczek/RethinkDb.Azure.git
    id: GetOldValue
    path: ../../src/RethinkDb.Azure.WebJobs.Extensions/Model/DocumentChange.cs
    startLine: 44
  assemblies:
  - RethinkDb.Azure.WebJobs.Extensions
  namespace: RethinkDb.Azure.WebJobs.Extensions.Model
  summary: "\nGets the old value as specified .NET type. When a document is inserted, old value will be null.\n"
  example: []
  syntax:
    content: public T GetOldValue<T>()
    typeParameters:
    - id: T
      description: Specified .NET type.
    return:
      type: '{T}'
      description: The old value as specified .NET type.
    content.vb: Public Function GetOldValue(Of T) As T
  overload: RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.GetOldValue*
  nameWithType.vb: DocumentChange.GetOldValue(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.GetOldValue(Of T)()
  name.vb: GetOldValue(Of T)()
- uid: RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.GetNewValue
  commentId: M:RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.GetNewValue
  id: GetNewValue
  parent: RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange
  langs:
  - csharp
  - vb
  name: GetNewValue()
  nameWithType: DocumentChange.GetNewValue()
  fullName: RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.GetNewValue()
  type: Method
  source:
    remote:
      path: src/RethinkDb.Azure.WebJobs.Extensions/Model/DocumentChange.cs
      branch: master
      repo: https://github.com/tpeczek/RethinkDb.Azure.git
    id: GetNewValue
    path: ../../src/RethinkDb.Azure.WebJobs.Extensions/Model/DocumentChange.cs
    startLine: 53
  assemblies:
  - RethinkDb.Azure.WebJobs.Extensions
  namespace: RethinkDb.Azure.WebJobs.Extensions.Model
  summary: "\nGets the new value. When a document is deleted, new value will be null.\n"
  example: []
  syntax:
    content: public JObject GetNewValue()
    return:
      type: Newtonsoft.Json.Linq.JObject
      description: The new value.
    content.vb: Public Function GetNewValue As JObject
  overload: RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.GetNewValue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.GetNewValue``1
  commentId: M:RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.GetNewValue``1
  id: GetNewValue``1
  parent: RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange
  langs:
  - csharp
  - vb
  name: GetNewValue<T>()
  nameWithType: DocumentChange.GetNewValue<T>()
  fullName: RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.GetNewValue<T>()
  type: Method
  source:
    remote:
      path: src/RethinkDb.Azure.WebJobs.Extensions/Model/DocumentChange.cs
      branch: master
      repo: https://github.com/tpeczek/RethinkDb.Azure.git
    id: GetNewValue
    path: ../../src/RethinkDb.Azure.WebJobs.Extensions/Model/DocumentChange.cs
    startLine: 63
  assemblies:
  - RethinkDb.Azure.WebJobs.Extensions
  namespace: RethinkDb.Azure.WebJobs.Extensions.Model
  summary: "\nGets the new value as specified .NET type. When a document is deleted, new value will be null.\n"
  example: []
  syntax:
    content: public T GetNewValue<T>()
    typeParameters:
    - id: T
      description: Specified .NET type.
    return:
      type: '{T}'
      description: The new value as specified .NET type.
    content.vb: Public Function GetNewValue(Of T) As T
  overload: RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.GetNewValue*
  nameWithType.vb: DocumentChange.GetNewValue(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.GetNewValue(Of T)()
  name.vb: GetNewValue(Of T)()
references:
- uid: RethinkDb.Azure.WebJobs.Extensions.Model
  commentId: N:RethinkDb.Azure.WebJobs.Extensions.Model
  name: RethinkDb.Azure.WebJobs.Extensions.Model
  nameWithType: RethinkDb.Azure.WebJobs.Extensions.Model
  fullName: RethinkDb.Azure.WebJobs.Extensions.Model
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.WebJobs.RethinkDbTriggerAttribute.IncludeTypes
  commentId: P:Microsoft.Azure.WebJobs.RethinkDbTriggerAttribute.IncludeTypes
  isExternal: true
- uid: RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.Type*
  commentId: Overload:RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.Type
  name: Type
  nameWithType: DocumentChange.Type
  fullName: RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.Type
- uid: System.Nullable{RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChangeType}
  commentId: T:System.Nullable{RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChangeType}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DocumentChangeType>
  nameWithType: Nullable<DocumentChangeType>
  fullName: System.Nullable<RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChangeType>
  nameWithType.vb: Nullable(Of DocumentChangeType)
  fullName.vb: System.Nullable(Of RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChangeType)
  name.vb: Nullable(Of DocumentChangeType)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChangeType
    name: DocumentChangeType
    nameWithType: DocumentChangeType
    fullName: RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChangeType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChangeType
    name: DocumentChangeType
    nameWithType: DocumentChangeType
    fullName: RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChangeType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.GetOldValue*
  commentId: Overload:RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.GetOldValue
  name: GetOldValue
  nameWithType: DocumentChange.GetOldValue
  fullName: RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.GetOldValue
- uid: Newtonsoft.Json.Linq.JObject
  commentId: T:Newtonsoft.Json.Linq.JObject
  parent: Newtonsoft.Json.Linq
  isExternal: true
  name: JObject
  nameWithType: JObject
  fullName: Newtonsoft.Json.Linq.JObject
- uid: Newtonsoft.Json.Linq
  commentId: N:Newtonsoft.Json.Linq
  isExternal: true
  name: Newtonsoft.Json.Linq
  nameWithType: Newtonsoft.Json.Linq
  fullName: Newtonsoft.Json.Linq
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.GetNewValue*
  commentId: Overload:RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.GetNewValue
  name: GetNewValue
  nameWithType: DocumentChange.GetNewValue
  fullName: RethinkDb.Azure.WebJobs.Extensions.Model.DocumentChange.GetNewValue
